<div class="min-h-screen" x-data="{
    user: null,
    loading: true,
    error: '',
    async logout() {
        try {
            const refreshToken = localStorage.getItem('refreshToken');
            
            const response = await fetch('/api/v1/auth/logout', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ refreshToken })
            });
            
            if (!response.ok) {
                throw new Error('Logout failed');
            }
            
            localStorage.removeItem('accessToken');
            localStorage.removeItem('refreshToken');
            
            window.location.href = '/';
        } catch (err) {
            this.error = err.message;
        }
    },
    async fetchUserProfile() {
        this.loading = true;
        this.error = '';
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                window.location.href = '/';
                return;
            }
            
            const response = await fetch('/api/v1/auth/profile', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                if (response.status === 401) {
                    localStorage.removeItem('accessToken');
                    localStorage.removeItem('refreshToken');
                    window.location.href = '/';
                    return;
                }
                throw new Error('Failed to fetch user profile');
            }
            
            const data = await response.json();
            if (!data || !data.data) {
                throw new Error('Invalid response format');
            }
            this.user = data.data;
        } catch (err) {
            this.error = err.message;
            this.user = null;
        } finally {
            this.loading = false;
        }
    }
}" x-init="fetchUserProfile()">
    <div class="bg-white shadow-md rounded-lg p-6 max-w-4xl mx-auto">
        <div class="flex justify-between items-center mb-6 pb-4 border-b border-gray-200">
            <h1 class="text-2xl font-bold text-gray-800">User Dashboard</h1>
            <div class="flex space-x-4">
                <a href="/file-manager" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    File Manager
                </a>
                <button @click="logout()"
                    class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Logout
                </button>
            </div>
        </div>

        <div x-show="loading" class="text-center py-8">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800"></div>
            <p class="mt-2 text-gray-600">Loading user information...</p>
        </div>

        <div x-show="error && !loading" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <span x-text="error"></span>
        </div>

        <template x-if="user && !loading">
            <div class="space-y-6">
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h2 class="text-xl font-semibold mb-4 text-gray-700">Profile Information</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-500">Username</p>
                            <p class="font-medium" x-text="user.username || 'N/A'"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Email</p>
                            <p class="font-medium" x-text="user.email || 'N/A'"></p>
                        </div>
                        <template x-if="user.userProfile">
                            <div>
                                <p class="text-sm text-gray-500">First Name</p>
                                <p class="font-medium" x-text="user.userProfile?.firstName || 'Not provided'"></p>
                            </div>
                        </template>
                        <template x-if="user.userProfile">
                            <div>
                                <p class="text-sm text-gray-500">Last Name</p>
                                <p class="font-medium" x-text="user.userProfile?.lastName || 'Not provided'"></p>
                            </div>
                        </template>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg">
                    <h2 class="text-xl font-semibold mb-4 text-gray-700">Account Details</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-500">Account Status</p>
                            <p class="font-medium">
                                <span x-text="user.isActive ? 'Active' : 'Inactive'"
                                    :class="user.isActive ? 'text-green-600' : 'text-red-600'"></span>
                            </p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Member Since</p>
                            <p class="font-medium"
                                x-text="user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'"></p>
                        </div>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg">
                    <h2 class="text-xl font-semibold mb-4 text-gray-700">Roles & Permissions</h2>
                    <template x-if="user.userRoles && user.userRoles.length > 0">
                        <div class="flex flex-wrap gap-2">
                            <template x-for="userRole in user.userRoles" :key="userRole.id">
                                <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full"
                                    x-text="userRole.role.name"></span>
                            </template>
                        </div>
                    </template>
                    <p x-show="!user.userRoles || user.userRoles.length === 0" class="text-gray-500">No roles assigned
                    </p>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg" x-data="{
                    dragOver: false,
                    files: [],
                    uploading: false,
                    uploadProgress: {},
                    error: '',
                    maxFileSize: 5 * 1024 * 1024,
                    allowedTypes: ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'],
                    previewUrls: {},

                    handleDrop(e) {
                        e.preventDefault();
                        this.dragOver = false;
                        const droppedFiles = [...e.dataTransfer.files];
                        this.validateAndAddFiles(droppedFiles);
                    },

                    validateAndAddFiles(newFiles) {
                        Array.from(newFiles).forEach(file => {
                            if (!this.allowedTypes.includes(file.type)) {
                                this.error = `File type ${file.type} is not supported`;
                                return;
                            }
                            if (file.size > this.maxFileSize) {
                                this.error = `File ${file.name} is too large (max 5MB)`;
                                return;
                            }
                            this.files.push(file);
                            if (file.type.startsWith('image/')) {
                                this.createPreview(file);
                            }
                        });
                    },

                    createPreview(file) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            this.previewUrls[file.name] = e.target.result;
                        };
                        reader.readAsDataURL(file);
                    },

                    async uploadFiles() {
                        this.uploading = true;
                        this.error = '';
                        const accessToken = localStorage.getItem('accessToken');

                        for (const file of this.files) {
                            this.uploadProgress[file.name] = 0;
                            const formData = new FormData();
                            formData.append('file', file);

                            try {
                                const response = await fetch('/api/v1/asset/upload', {
                                    method: 'POST',
                                    headers: {
                                        'Authorization': `Bearer ${accessToken}`
                                    },
                                    body: formData
                                });

                                if (!response.ok) {
                                    throw new Error(`Upload failed for ${file.name}`);
                                }

                                this.uploadProgress[file.name] = 100;
                            } catch (err) {
                                this.error = err.message;
                                this.uploadProgress[file.name] = 0;
                            }
                        }

                        this.uploading = false;
                        if (!this.error) {
                            this.files = [];
                            this.previewUrls = {};
                            this.uploadProgress = {};
                        }
                    },

                    removeFile(fileName) {
                        this.files = this.files.filter(f => f.name !== fileName);
                        delete this.previewUrls[fileName];
                        delete this.uploadProgress[fileName];
                    }
                }">
                    <h2 class="text-xl font-semibold mb-4 text-gray-700">Upload Assets</h2>

                    <div class="mb-4" x-show="error" x-cloak>
                        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
                            <span x-text="error"></span>
                        </div>
                    </div>

                    <div class="border-2 border-dashed rounded-lg p-6 text-center"
                        :class="{ 'border-blue-500 bg-blue-50': dragOver, 'border-gray-300': !dragOver }"
                        @dragover.prevent="dragOver = true" @dragleave.prevent="dragOver = false"
                        @drop.prevent="handleDrop($event)">
                        <div class="space-y-2">
                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none"
                                viewBox="0 0 48 48">
                                <path d="M24 8l-8 8h6v16h4V16h6l-8-8z" fill="currentColor" />
                                <path d="M4 28v12a4 4 0 004 4h32a4 4 0 004-4V28" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            <div class="text-gray-600">
                                <label class="cursor-pointer hover:text-blue-500">
                                    <span>Upload a file</span>
                                    <input type="file" class="hidden" multiple
                                        @change="validateAndAddFiles($event.target.files)">
                                </label>
                                <span class="text-gray-500">or drag and drop</span>
                            </div>
                            <p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
                        </div>
                    </div>

                    <div class="mt-4 space-y-4" x-show="files.length > 0">
                        <template x-for="file in files" :key="file.name">
                            <div class="bg-white p-4 rounded border">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-4">
                                        <template x-if="previewUrls[file.name]">
                                            <img :src="previewUrls[file.name]" class="h-10 w-10 object-cover rounded">
                                        </template>
                                        <template x-if="!previewUrls[file.name]">
                                            <div class="h-10 w-10 bg-gray-100 rounded flex items-center justify-center">
                                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor"
                                                    viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round"
                                                        stroke-width="2"
                                                        d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                                                </svg>
                                            </div>
                                        </template>
                                        <div>
                                            <p class="text-sm font-medium text-gray-900" x-text="file.name"></p>
                                            <p class="text-xs text-gray-500"
                                                x-text="Math.round(file.size / 1024) + ' KB'"></p>
                                        </div>
                                    </div>
                                    <button @click="removeFile(file.name)" class="text-red-500 hover:text-red-700">
                                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="mt-2" x-show="uploadProgress[file.name] > 0">
                                    <div class="bg-gray-200 rounded-full h-2">
                                        <div class="bg-blue-500 rounded-full h-2 transition-all duration-300"
                                            :style="`width: ${uploadProgress[file.name]}%`"></div>
                                    </div>
                                </div>
                            </div>
                        </template>

                        <div class="flex justify-end">
                            <button @click="uploadFiles()" :disabled="uploading"
                                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50 disabled:cursor-not-allowed">
                                <span x-show="!uploading">Upload Files</span>
                                <span x-show="uploading">Uploading...</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg" x-data="{
                    assets: [],
                    currentPage: 1,
                    totalPages: 1,
                    loading: false,
                    error: '',
                    nextMarker: null,
                    itemsPerPage: 12,

                    async fetchAssets() {
                        this.loading = true;
                        this.error = '';
                        try {
                            const accessToken = localStorage.getItem('accessToken');
                            const response = await fetch(`/api/v1/asset/list?limit=${this.itemsPerPage}${this.nextMarker ? `&marker=${this.nextMarker}` : ''}`, {
                                method: 'GET',
                                headers: {
                                    'Authorization': `Bearer ${accessToken}`,
                                    'Content-Type': 'application/json'
                                }
                            });

                            if (!response.ok) {
                                throw new Error('Failed to fetch assets');
                            }

                            const data = await response.json();
                            this.assets = data.data.files;
                            this.nextMarker = data.data.nextMarker;
                        } catch (err) {
                            this.error = err.message;
                        } finally {
                            this.loading = false;
                        }
                    },

                    async deleteAsset(fileId) {
                        if (!confirm('Are you sure you want to delete this file?')) {
                            return;
                        }

                        try {
                            const accessToken = localStorage.getItem('accessToken');
                            const response = await fetch(`/api/v1/asset/${fileId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Authorization': `Bearer ${accessToken}`,
                                    'Content-Type': 'application/json'
                                }
                            });

                            if (!response.ok) {
                                throw new Error('Failed to delete asset');
                            }

                            await this.fetchAssets();
                        } catch (err) {
                            this.error = err.message;
                        }
                    },

                    getFileIcon(mimeType) {
                        if (mimeType.startsWith('image/')) {
                            return 'image';
                        } else if (mimeType === 'application/pdf') {
                            return 'pdf';
                        } else {
                            return 'file';
                        }
                    },

                    formatFileSize(bytes) {
                        const units = ['B', 'KB', 'MB', 'GB'];
                        let size = bytes;
                        let unitIndex = 0;
                        while (size >= 1024 && unitIndex < units.length - 1) {
                            size /= 1024;
                            unitIndex++;
                        }
                        return `${size.toFixed(1)} ${units[unitIndex]}`;
                    },

                    formatDate(dateString) {
                        return new Date(dateString).toLocaleDateString();
                    }
                }" x-init="fetchAssets()">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold text-gray-700">My Assets</h2>
                        <div class="flex space-x-2">
                            <button @click="fetchAssets()" :disabled="loading"
                                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50 disabled:cursor-not-allowed">
                                <span x-show="!loading">Refresh</span>
                                <span x-show="loading">Loading...</span>
                            </button>
                        </div>
                    </div>

                    <div x-show="error" class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
                        <span x-text="error"></span>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                        <template x-for="asset in assets" :key="asset.fileId">
                            <div class="bg-white p-4 rounded-lg shadow hover:shadow-md transition-shadow duration-200">
                                <div class="aspect-w-16 aspect-h-9 mb-4">
                                    <template x-if="getFileIcon(asset.mimeType) === 'image'">
                                        <img :src="asset.url" class="w-full h-full object-cover rounded" :alt="asset.fileName">
                                    </template>
                                    <template x-if="getFileIcon(asset.mimeType) !== 'image'">
                                        <div class="w-full h-full flex items-center justify-center bg-gray-100 rounded">
                                            <svg class="h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                                            </svg>
                                        </div>
                                    </template>
                                </div>
                                <div class="space-y-2">
                                    <h3 class="text-sm font-medium text-gray-900 truncate" x-text="asset.fileName"></h3>
                                    <div class="flex justify-between text-xs text-gray-500">
                                        <span x-text="formatFileSize(asset.fileSize)"></span>
                                        <span x-text="formatDate(asset.uploadedAt)"></span>
                                    </div>
                                    <div class="flex justify-end space-x-2">
                                        <a :href="asset.url" target="_blank"
                                            class="text-blue-500 hover:text-blue-700 text-sm font-medium">
                                            View
                                        </a>
                                        <button @click="deleteAsset(asset.fileId)"
                                            class="text-red-500 hover:text-red-700 text-sm font-medium">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </div>

                    <div class="mt-4 flex justify-center" x-show="nextMarker">
                        <button @click="fetchAssets()" :disabled="loading"
                            class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50 disabled:cursor-not-allowed">
                            Load More
                        </button>
                    </div>
                </div>
            </div>
        </template>
    </div>
</div>