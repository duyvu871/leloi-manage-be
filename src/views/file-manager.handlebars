{{!-- <link href="/statics/style/gridjs.css" rel="stylesheet" /> --}}
<link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('fileManager', () => ({
            // State Properties
            grid: null,
            loading: false,
            uploading: false,
            currentPage: 1,
            totalPages: 1,
            files: [],
            itemsPerPage: 10,
            error: '',
            dragOver: false,
            uploadFiles: [],
            uploadProgress: {},
            previewUrls: {},
            maxFileSize: 5 * 1024 * 1024, // 5MB
            allowedTypes: ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'],
            searchTerm: '', // Kept, but Grid.js handles its own search input by default

            // Initialization
            init() {
                console.log("Initializing FileManager...");
                // Ensure the element for Grid.js exists before initializing
                this.$nextTick(() => {
                    this.initGrid();
                    this.fetchFiles(); // Fetch initial data
                });
            },

            // Grid.js Initialization
            initGrid() {
                if (document.getElementById('grid-table')) {
                    console.log("Initializing Grid.js...");
                    this.grid = new gridjs.Grid({
                        columns: [
                            { id: 'fileId', name: 'File ID', sort: true, width: '200px', resizable: true, minWidth: '200px', maxWidth: '450px' },
                            {
                                id: 'fileInfo',
                                name: 'File',
                                width: '350px', 
                                resizable: true,
                                minWidth: '200px',
                                maxWidth: '500px',
                                sort: {
                                    compare: (a, b) => {
                                        const nameA = a.fileName.toUpperCase();
                                        const nameB = b.fileName.toUpperCase();
                                        if (nameA < nameB) return -1;
                                        if (nameA > nameB) return 1;
                                        return 0;
                                    }
                                },
                                formatter: (_, row) => {
                                    const fileData = row.cells[1].data;
                                    // Use gridjs.html to render complex content
                                    const iconClass = this.getFileIcon(fileData.mimetype || '');
                                    return gridjs.html(`
                                        <div class="flex items-center space-x-3 overflow-hidden">
                                            <i class="${iconClass} text-xl text-gray-400"></i>
                                            <div class="min-w-0 flex-1">
                                                <p class="text-sm font-medium text-gray-900 truncate" title="${fileData.fileName}">${fileData.fileName || 'N/A'}</p>
                                                <p class="text-xs text-gray-500 truncate">${this.formatFileSize(fileData.fileSize || 0)}</p>
                                            </div>
                                        </div>
                                    `);
                                }
                            },
                            {
                                id: 'fileSize',
                                name: 'Size',
                                sort: true,
                                width: '100px',
                                resizable: true, 
                                minWidth: '80px',
                                maxWidth: '150px',
                                formatter: (_, row) => this.formatFileSize(row.cells[1].data.fileSize || 0)
                            },
                            {
                                id: 'uploadedAt',
                                name: 'Upload Date',
                                sort: true,
                                width: '120px',
                                resizable: true,
                                minWidth: '100px', 
                                maxWidth: '200px',
                                formatter: (_, row) => new Date(row.cells[1].data.uploadedAt).toLocaleDateString() ?? 'N/A'
                            },
                            { 
                                id: 'mimetype', 
                                name: 'Type', 
                                sort: true,
                                formatter: (_, row) => {
                                    const fileData = row.cells[1].data;
                                    return fileData.mimetype || 'N/A';
                                }
                            },
                            {
                                id: 'actions',
                                name: 'Actions',
                                sort: false, // Actions column is usually not sortable
                                width: '120px', // Give actions some fixed space
                                formatter: (_, row) => {
                                    const fileData = row.cells[1].data;
                                    // Important: Use $el to get component's root, then querySelector for safety
                                    // Or pass component reference if possible (more complex with Grid.js formatter)
                                    // Using Alpine.raw is often the simplest way here.
                                    return gridjs.html(`
                                    <div class="flex space-x-2 justify-center">
                                        <button title="Download" class="text-blue-600 hover:text-blue-800" onclick="window.open('${fileData.url}', '_blank')">
                                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>
                                        </button>
                                        <button title="Delete" class="text-red-600 hover:text-red-800" onclick="Alpine.store('fileManagerRef').deleteFile('${fileData.fileId}')">
                                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                        </button>
                                    </div>
                                `);
                                }
                            }
                        ],
                        data: () => {
                            // Use a function to ensure it fetches data reactively if needed,
                            // although we manually update via updateConfig anyway.
                            // Or simply start with [] and let fetchFiles populate.
                            console.log("Grid.js requesting data (initial or refresh)");
                            return this.files; // Provide current files
                        },
                        // Server-side processing handled by Alpine's fetchFiles, so Grid.js handles client-side features
                        search: {
                            enabled: true
                        },
                        sort: true,
                        pagination: {
                            enabled: true,
                            limit: this.itemsPerPage,
                            summary: true // Shows "Showing x to y of z"
                            // Remove 'server' config - Alpine handles data fetching based on its own pagination controls
                        },
                        autoWidth: false, // Disable auto-width to allow custom widths
                        resizable: true, // Enable column resizing
                        sortable: true, // Enable column sorting
                        searchable: true, // Enable global search
                        fixedHeader: true, // Keep header fixed
                        // Optional: Add CSS classes for better integration if needed
                        // className: { ... }
                        style: { // Add basic styling via Grid.js config with overflow handling
                            table: {
                                'min-width': '100%',
                                'border-collapse': 'collapse',
                                'table-layout': 'fixed', // Fixed table layout for better column width control
                            },
                            th: {
                                'border': '1px solid #e2e8f0',
                                'padding': '8px 12px',
                                'background-color': '#f8fafc',
                                'text-align': 'left',
                                'overflow': 'hidden',
                                'text-overflow': 'ellipsis',
                                'white-space': 'nowrap',
                            },
                            td: {
                                'border': '1px solid #e2e8f0',
                                'padding': '8px 12px',
                                'overflow': 'hidden',
                                'text-overflow': 'ellipsis',
                                'white-space': 'nowrap',
                                'max-width': '0', // Forces text-overflow to work
                            },
                        }

                    }).render(document.getElementById('grid-table'));
                    console.log("Grid.js Rendered");

                    // Expose component instance for Grid.js callbacks if needed (alternative to Alpine.raw)
                    // Use Alpine.store for better access
                    Alpine.store('fileManagerRef', this);

                } else {
                    console.error("Grid.js target element #grid-table not found.");
                }
            },

            // Data Fetching
            async fetchFiles() {
                this.loading = true;
                this.error = '';
                console.log(`Fetching page ${this.currentPage} with limit ${this.itemsPerPage}`);
                try {
                    const accessToken = localStorage.getItem('accessToken');
                    if (!accessToken) {
                        console.log("No access token, redirecting to login.");
                        window.location.href = '/'; // Or your login page
                        return;
                    }

                    // Construct URL with query parameters
                    const url = new URL('/api/v1/asset/list', window.location.origin);
                    url.searchParams.append('page', this.currentPage);
                    url.searchParams.append('limit', this.itemsPerPage);
                    // Add sorting/search params if backend supports them
                    // url.searchParams.append('sort', this.sortField);
                    // url.searchParams.append('direction', this.sortDirection);
                    // url.searchParams.append('search', this.searchTerm);

                    const response = await fetch(url.toString(), {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json',
                            'Accept': 'application/json' // Good practice
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ message: 'Failed to fetch files and parse error' }));
                        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();

                    if (data && data.data && Array.isArray(data.data.files)) {
                        // Map data to Grid.js expected format if necessary,
                        // or ensure backend returns fields matching column IDs
                        this.files = data.data.files.map(file => ({
                            ...file, // Spread existing file properties
                            // Ensure fields match Grid.js column IDs if they differ
                            // e.g., if backend sends 'name' but grid expects 'fileName'
                            fileInfo: { fileName: file.fileName, fileSize: file.fileSize, type: file.type }, // Pass data needed by fileInfo formatter
                        }));
                        this.totalPages = Math.ceil((data.data.total || 0) / this.itemsPerPage);
                        console.log("Files fetched:", this.files.length, "Total pages:", this.totalPages);

                        // Update Grid.js data and force re-render
                        if (this.grid) {
                            console.log("Updating Grid.js data...");
                            // Transform data slightly to match expected cell structure if needed by formatters
                            const gridData = this.files.map(file => [
                                file.fileId,
                                file, // Pass the whole file object for the complex 'File' column formatter
                                file.fileSize,
                                file.uploadDate,
                                file.type,
                                file // Pass the whole file object for the 'Actions' formatter too
                            ]);
                            this.grid.updateConfig({
                                data: gridData,
                                pagination: { // Also update total count if backend provides it for accurate pagination summary
                                    enabled: true,
                                    limit: this.itemsPerPage,
                                    summary: true,
                                    // total: data.data.total // Grid.js doesn't directly use 'total' this way with client-side data array
                                }
                            }).forceRender();
                            console.log("Grid.js updated.");
                        } else {
                            console.warn("Grid instance not available for update.");
                        }
                    } else {
                        console.error("Invalid data structure received:", data);
                        throw new Error('Invalid data structure received from API');
                    }

                } catch (err) {
                    console.error("Fetch files error:", err);
                    this.error = err.message || 'An unknown error occurred while fetching files.';
                    this.files = []; // Clear files on error
                    this.totalPages = 1;
                    if (this.grid) { // Clear grid on error too
                        this.grid.updateConfig({ data: [] }).forceRender();
                    }
                } finally {
                    this.loading = false;
                    console.log("Loading finished.");
                }
            },

            // File Upload Logic
            handleDrop(e) {
                e.preventDefault();
                this.dragOver = false;
                const droppedFiles = [...e.dataTransfer.files];
                console.log("Files dropped:", droppedFiles.length);
                this.validateAndAddFiles(droppedFiles);
            },

            handleFileSelect(event) {
                const selectedFiles = [...event.target.files];
                console.log("Files selected:", selectedFiles.length);
                this.validateAndAddFiles(selectedFiles);
                event.target.value = null; // Reset file input
            },

            validateAndAddFiles(newFiles) {
                this.error = ''; // Clear previous validation errors
                let addedCount = 0;
                Array.from(newFiles).forEach(file => {
                    // Check if file already exists in the upload list
                    if (this.uploadFiles.some(existingFile => existingFile.name === file.name && existingFile.size === file.size)) {
                        console.log(`File ${file.name} already in upload list.`);
                        // Optionally show a message to the user
                        // this.error = `File ${file.name} is already added.`;
                        return; // Skip adding duplicate
                    }

                    if (!this.allowedTypes.includes(file.type)) {
                        this.error = `File type not supported: ${file.name} (${file.type}). Allowed: ${this.allowedTypes.join(', ')}`;
                        console.warn(this.error);
                        return; // Stop processing this file
                    }
                    if (file.size > this.maxFileSize) {
                        this.error = `File too large: ${file.name} (${this.formatFileSize(file.size)}). Max: ${this.formatFileSize(this.maxFileSize)}`;
                        console.warn(this.error);
                        return; // Stop processing this file
                    }

                    // If validation passes for this file
                    this.uploadFiles.push(file);
                    this.uploadProgress[file.name] = 0; // Initialize progress
                    if (file.type.startsWith('image/')) {
                        this.createPreview(file);
                    }
                    addedCount++;
                });
                console.log(`${addedCount} valid files added to upload queue.`);
                // If multiple errors occurred, only the last one is shown.
                // Consider collecting all errors in an array if needed.
            },

            createPreview(file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    // Use $nextTick to ensure Alpine updates the DOM correctly
                    this.$nextTick(() => {
                        this.previewUrls[file.name] = e.target.result;
                    });
                };
                reader.onerror = (e) => {
                    console.error(`Error reading file for preview: ${file.name}`, e);
                };
                reader.readAsDataURL(file);
            },

            async uploadSelectedFiles() {
                if (this.uploadFiles.length === 0) {
                    console.log("No files selected for upload.");
                    return;
                }
                this.uploading = true;
                this.error = ''; // Clear previous errors
                const accessToken = localStorage.getItem('accessToken');
                if (!accessToken) {
                    this.error = "Authentication token not found. Please log in.";
                    this.uploading = false;
                    return;
                }

                console.log(`Starting upload for ${this.uploadFiles.length} files.`);
                // Use Promise.all to run uploads concurrently (optional, adjust if backend has limits)
                const uploadPromises = this.uploadFiles.map(async (file) => {
                    this.uploadProgress[file.name] = 0; // Reset/set progress
                    const formData = new FormData();
                    formData.append('file', file); // Ensure backend expects field named 'file'

                    try {
                        // Note: Fetch API currently doesn't support tracking upload progress natively.
                        // For progress bars, you'd typically use XMLHttpRequest or a library.
                        // Here, we'll just set to 100% on success.
                        console.log(`Uploading ${file.name}...`);
                        const response = await fetch('/api/v1/asset/upload', {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${accessToken}`,
                                // 'Content-Type' is set automatically by browser for FormData
                                'Accept': 'application/json'
                            },
                            body: formData
                        });

                        if (!response.ok) {
                            const errorData = await response.json().catch(() => ({ message: `Upload failed for ${file.name}` }));
                            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                        }
                        console.log(`Upload successful for ${file.name}.`);
                        // Simulate progress completion
                        this.$nextTick(() => {
                            this.uploadProgress[file.name] = 100;
                        });
                        return { success: true, fileName: file.name };

                    } catch (err) {
                        console.error(`Upload error for ${file.name}:`, err);
                        this.$nextTick(() => {
                            this.uploadProgress[file.name] = -1; // Indicate error
                        });
                        // Don't set global error here, collect results
                        // this.error = err.message; // This would overwrite previous errors
                        return { success: false, fileName: file.name, error: err.message };
                    }
                });

                // Wait for all uploads to complete
                const results = await Promise.all(uploadPromises);
                const failedUploads = results.filter(r => !r.success);

                this.uploading = false;
                console.log("All uploads finished.");

                if (failedUploads.length > 0) {
                    // Combine error messages
                    this.error = `Failed to upload ${failedUploads.length} file(s): ${failedUploads.map(f => f.fileName).join(', ')}. Check console for details.`;
                    // Decide if you want to keep failed files in the list or remove them
                    // this.uploadFiles = this.uploadFiles.filter(f => !failedUploads.some(failed => failed.fileName === f.name));
                } else {
                    console.log("All files uploaded successfully.");
                    // Clear the upload list only if all succeeded
                    this.uploadFiles = [];
                    this.previewUrls = {};
                    this.uploadProgress = {};
                    // Refresh the file list to show newly uploaded files
                    console.log("Refreshing file list after upload.");
                    this.currentPage = 1; // Go back to first page after upload
                    await this.fetchFiles();
                }
            },

            removeFile(fileName) {
                console.log(`Removing ${fileName} from upload queue.`);
                this.uploadFiles = this.uploadFiles.filter(f => f.name !== fileName);
                delete this.previewUrls[fileName];
                delete this.uploadProgress[fileName];
            },

            // File Deletion
            async deleteFile(fileId) {
                console.log(`Attempting to delete file: ${fileId}`);
                if (!confirm(`Are you sure you want to delete file ID: ${fileId}?`)) {
                    console.log("Deletion cancelled by user.");
                    return;
                }

                this.loading = true; // Indicate activity
                this.error = '';
                try {
                    const accessToken = localStorage.getItem('accessToken');
                    if (!accessToken) {
                        this.error = "Authentication token not found. Please log in.";
                        this.loading = false;
                        return;
                    }

                    const response = await fetch(`/api/v1/asset/delete/${fileId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ message: 'Failed to delete file' }));
                        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                    }

                    console.log(`File ${fileId} deleted successfully.`);
                    // Refresh the list after successful deletion
                    // Consider staying on the current page or going to page 1 if current page becomes empty
                    await this.fetchFiles();

                } catch (err) {
                    console.error("Delete file error:", err);
                    this.error = err.message || 'An unknown error occurred while deleting the file.';
                    this.loading = false; // Stop loading indicator on error
                }
                // No finally block needed here as fetchFiles sets loading = false
            },

            // Utility Functions
            formatFileSize(bytes) {
                if (bytes == null || isNaN(bytes)) return 'N/A'; // Handle null or NaN
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']; // Added TB
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                // Ensure i is within the bounds of the sizes array
                const index = Math.max(0, Math.min(i, sizes.length - 1));
                return parseFloat((bytes / Math.pow(k, index)).toFixed(2)) + ' ' + sizes[index];
            },

            getFileIcon(mimeType = '') {
                if (mimeType.startsWith('image/')) {
                    return 'fas fa-image';
                }
                if (mimeType === 'application/pdf') {
                    return 'fas fa-file-pdf';
                }
                if (mimeType.startsWith('video/')) {
                    return 'fas fa-video';
                }
                if (mimeType.startsWith('audio/')) {
                    return 'fas fa-music';
                }
                if (mimeType === 'application/zip' || mimeType === 'application/x-zip-compressed') {
                    return 'fas fa-file-archive';
                }
                if (mimeType.startsWith('text/')) {
                    return 'fas fa-file-alt';
                }
                return 'fas fa-file';
            },

            // Pagination Controls
            goToPage(page) {
                if (page >= 1 && page <= this.totalPages && page !== this.currentPage) {
                    console.log(`Changing page to ${page}`);
                    this.currentPage = page;
                    this.fetchFiles();
                }
            },

            nextPage() {
                if (this.currentPage < this.totalPages) {
                    this.currentPage++;
                    console.log(`Changing to next page: ${this.currentPage}`);
                    this.fetchFiles();
                }
            },

            previousPage() {
                if (this.currentPage > 1) {
                    this.currentPage--;
                    console.log(`Changing to previous page: ${this.currentPage}`);
                    this.fetchFiles();
                }
            }
        }));
    });
</script>

<!-- HTML Structure (ensure it's within the body) -->
<div class="min-h-screen bg-gray-100 p-4" x-data="fileManager" x-cloak>
    <div class="bg-white shadow-md rounded-lg p-6 max-w-7xl mx-auto"> <!-- Increased max-width -->
        <div class="flex justify-between items-center mb-6 pb-4 border-b border-gray-200">
            <h1 class="text-2xl font-semibold text-gray-800">File Manager</h1> <!-- Adjusted font weight -->
        </div>

        <!-- Error Display -->
        <div x-show="error" x-transition class="mb-4">
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 px-4 py-3 rounded relative" role="alert">
                <strong class="font-bold">Error:</strong>
                <span class="block sm:inline" x-text="error"></span>
                <button @click="error = ''" class="absolute top-0 bottom-0 right-0 px-4 py-3">
                    <svg class="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20">
                        <title>Close</title>
                        <path
                            d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z" />
                    </svg>
                </button>
            </div>
        </div>

        <!-- Upload Section -->
        <div class="mb-8">
            <h2 class="text-lg font-medium text-gray-700">Upload New Files</h2>
            <div class="border-2 border-dashed rounded-lg p-6 text-center transition-colors duration-200 ease-in-out"
                :class="{ 'border-blue-500 bg-blue-50': dragOver, 'border-gray-300 hover:border-gray-400': !dragOver }"
                @dragover.prevent="dragOver = true" @dragleave.prevent="dragOver = false" @drop="handleDrop($event)">

                <div class="space-y-2">
                    <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48"
                        aria-hidden="true">
                        <path
                            d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                            stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    <div class="text-sm text-gray-600">
                        <label for="file-upload"
                            class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                            <span>Select files</span>
                            <input id="file-upload" name="file-upload" type="file" class="sr-only" multiple
                                @change="handleFileSelect($event)">
                        </label>
                        <p class="pl-1 inline">or drag and drop</p>
                    </div>
                    <p class="text-xs text-gray-500">Allowed: PNG, JPG, GIF, PDF (Max: <span
                            x-text="formatFileSize(maxFileSize)"></span>)</p>
                </div>
            </div>

            <!-- Upload Preview -->
            <div x-show="uploadFiles.length > 0" x-transition class="mt-6 space-y-4">
                <h3 class="text-md font-medium text-gray-600">Files ready for upload:</h3>
                <template x-for="file in uploadFiles" :key="file.name + '-' + file.size"> <!-- More robust key -->
                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200">
                        <div class="flex items-center space-x-3 overflow-hidden">
                            <!-- Preview or Icon -->
                            <div class="flex-shrink-0 h-12 w-12 flex items-center justify-center rounded bg-gray-200">
                                <template x-if="previewUrls[file.name]">
                                    <img :src="previewUrls[file.name]" :alt="`Preview of ${file.name}`"
                                        class="h-full w-full object-cover rounded">
                                </template>
                                <template x-if="!previewUrls[file.name]">
                                    <svg class="h-8 w-8 text-gray-500" fill="none" stroke="currentColor"
                                        viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            :d="getFileIcon(file.type)" />
                                    </svg>
                                </template>
                            </div>
                            <!-- File Info -->
                            <div class="flex-grow overflow-hidden">
                                <p class="text-sm font-medium text-gray-900 truncate" x-text="file.name"
                                    :title="file.name"></p>
                                <p class="text-xs text-gray-500"
                                    x-text="`${formatFileSize(file.size)} - ${file.type || 'unknown type'}`"></p>
                                <!-- Progress Bar -->
                                <div class="mt-1 h-2 bg-gray-200 rounded-full overflow-hidden"
                                    x-show="uploadProgress[file.name] !== undefined && uploadProgress[file.name] >= 0">
                                    <div class="h-full bg-blue-500 transition-all duration-300 ease-linear"
                                        :style="`width: ${uploadProgress[file.name]}%`"></div>
                                </div>
                                <p class="text-xs text-red-500 mt-1" x-show="uploadProgress[file.name] === -1">Upload
                                    failed</p>
                            </div>
                        </div>
                        <!-- Remove Button -->
                        <button @click="removeFile(file.name)" :disabled="uploading"
                            class="ml-4 flex-shrink-0 text-gray-500 hover:text-red-600 disabled:opacity-50 disabled:cursor-not-allowed"
                            title="Remove file">
                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd"
                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                    clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </template>
                <!-- Upload Action Button -->
                <div class="mt-4 flex justify-end">
                    <button @click="uploadSelectedFiles()" :disabled="uploading || uploadFiles.length === 0"
                        class="inline-flex items-center bg-indigo-600 text-white px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                        <svg x-show="uploading" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                            xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                            </circle>
                            <path class="opacity-75" fill="currentColor"
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                            </path>
                        </svg>
                        <span x-text="uploading ? 'Uploading...' : `Upload ${uploadFiles.length} File(s)`"></span>
                    </button>
                </div>
            </div>
        </div>

        <!-- File List Section -->
        <div>
            <h2 class="text-lg font-medium text-gray-700 mb-3">Uploaded Files</h2>

            <!-- Loading Indicator -->
            <div x-show="loading" class="text-center py-10">
                <div role="status">
                    <svg aria-hidden="true"
                        class="inline w-8 h-8 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
                        viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                            fill="currentColor" />
                        <path
                            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                            fill="currentFill" />
                    </svg>
                    <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-2 text-sm text-gray-600">Loading files...</p>
            </div>

            <!-- No Files Message -->
            <div x-show="!loading && files.length === 0 && !error" class="text-center py-10">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"
                    aria-hidden="true">
                    <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No files</h3>
                <p class="mt-1 text-sm text-gray-500">Get started by uploading a new file.</p>
            </div>

            <!-- Grid.js Table Container -->
            <div x-show="!loading && files.length > 0">
                <div id="grid-table" class="w-full"></div>
            </div>
        </div>

        <!-- Alpine-Managed Pagination -->
        <div x-show="!loading && totalPages > 1"
            class="mt-6 px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <!-- Pagination Summary (optional, if Grid.js summary is disabled or for custom format) -->
            <!-- <div class="flex-1 flex justify-between sm:hidden"> mobile view ... </div> -->
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                    <!-- You can calculate start/end item numbers if needed -->
                    <!-- <p class="text-sm text-gray-700"> Showing <span x-text="(currentPage - 1) * itemsPerPage + 1"></span> to <span x-text="Math.min(currentPage * itemsPerPage, files.length)"></span> of <span x-text="files.length"></span> results </p> -->
                    <p class="text-sm text-gray-700">
                        Page <span class="font-medium" x-text="currentPage"></span> of <span class="font-medium"
                            x-text="totalPages"></span>
                    </p>
                </div>
                <div>
                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                        <button @click="previousPage()" :disabled="currentPage === 1"
                            class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                            <span class="sr-only">Previous</span>
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd"
                                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                                    clip-rule="evenodd" />
                            </svg>
                        </button>

                        <!-- Page Numbers (simplified for brevity, add ellipsis logic if many pages) -->
                        <template x-for="page in Array.from({ length: totalPages }, (_, i) => i + 1)" :key="page">
                            <!-- Current Page -->
                            <button x-show="page === currentPage" aria-current="page"
                                class="z-10 bg-indigo-50 border-indigo-500 text-indigo-600 relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                <span x-text="page"></span>
                            </button>
                            <!-- Other Pages -->
                            <button x-show="page !== currentPage" @click="goToPage(page)"
                                class="bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                <span x-text="page"></span>
                            </button>
                        </template>

                        <button @click="nextPage()" :disabled="currentPage === totalPages"
                            class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                            <span class="sr-only">Next</span>
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd"
                                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                    clip-rule="evenodd" />
                            </svg>
                        </button>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>